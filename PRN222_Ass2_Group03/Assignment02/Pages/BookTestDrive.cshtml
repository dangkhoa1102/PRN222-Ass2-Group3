@page
@model Assignment02.Pages.BookTestDriveModel
@{
    ViewData["Title"] = "Đặt lịch hẹn lái thử";
}

@section Styles {
    <link rel="stylesheet" href="~/css/appointments.css" asp-append-version="true" />
    <style>
        #toastContainer {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .toast {
            padding: 12px 20px;
            margin-bottom: 10px;
            border-radius: 4px;
            color: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }

        .toast-success {
            background-color: #28a745;
        }

        .toast-error {
            background-color: #dc3545;
        }

        #vehicleImage {
            margin-top: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
    </style>
}

<!-- Hero Section -->
<div class="hero-section">
    <div class="hero-content">
        <h1 class="hero-title">
            <i class="fas fa-calendar-check"></i>
            Đặt lịch hẹn lái thử
        </h1>
        <p class="hero-subtitle">Trải nghiệm xe điện với chúng tôi</p>
    </div>
</div>

<!-- Main Content -->
<div class="main-container">
    <div class="booking-card">
        <div class="card-header">
            <h2 class="card-title">
                <i class="fas fa-car"></i>
                Thông tin đặt lịch
            </h2>
            <p class="card-subtitle">Vui lòng điền đầy đủ thông tin bên dưới</p>
        </div>

        <form method="post" id="bookingForm" class="booking-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="DealerId" class="form-label">
                        <i class="fas fa-building"></i>
                        Chọn đại lý
                    </label>
                    <select asp-for="Appointment.DealerId" class="form-control" id="DealerId" required>
                        <option value="">-- Chọn đại lý --</option>
                        @foreach (var dealer in Model.Dealers)
                        {
                            <option value="@dealer.Id">@dealer.Name - @dealer.Address</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="VehicleId" class="form-label">
                        <i class="fas fa-car-side"></i>
                        Chọn xe
                    </label>
                    <select asp-for="Appointment.VehicleId" class="form-control" id="VehicleId" required>
                        <option value="">-- Chọn xe --</option>
                        @foreach (var vehicle in Model.Vehicles)
                        {
                            <option value="@vehicle.Id" 
                                    data-image="@(!string.IsNullOrEmpty(vehicle.Images) ? vehicle.Images : "")" 
                                    data-name="@vehicle.Name" 
                                    data-model="@vehicle.Model"
                                    title="Image path: @vehicle.Images">
                                @vehicle.Name @vehicle.Model (@(!string.IsNullOrEmpty(vehicle.Images) ? "Có hình" : "Không có hình"))
                            </option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group vehicle-image-group">
                <label class="form-label">
                    <i class="fas fa-image"></i>
                    Hình ảnh xe
                </label>
                <div class="vehicle-image-container">
                    <img id="vehicleImage" src="" alt="Hình ảnh xe" class="vehicle-image" />
                    <div class="no-image-placeholder">
                        <i class="fas fa-car"></i>
                        <p>Chọn xe để xem hình ảnh</p>
                    </div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="AppointmentDate" class="form-label">
                        <i class="fas fa-calendar-alt"></i>
                        Chọn ngày
                    </label>
                    <input asp-for="Appointment.AppointmentDate" type="date" class="form-control" id="AppointmentDate" required min="@DateTime.Now.ToString("yyyy-MM-dd")" />
                </div>

                <div class="form-group">
                    <label for="TimeSlot" class="form-label">
                        <i class="fas fa-clock"></i>
                        Chọn giờ
                    </label>
                    <select asp-for="SelectedTimeSlot" class="form-control" id="TimeSlot" required>
                        <option value="">-- Chọn giờ --</option>
                        @foreach (var slot in Model.AvailableTimeSlots)
                        {
                            <option value="@slot.AppointmentDate.ToString("HH:mm")">@slot.AppointmentDate.ToString("hh:mm tt")</option>
                        }
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label for="Notes" class="form-label">
                    <i class="fas fa-sticky-note"></i>
                    Ghi chú
                </label>
                <textarea asp-for="Appointment.Notes" class="form-control" id="Notes" rows="4" placeholder="Nhập ghi chú của bạn..."></textarea>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn-submit">
                    <i class="fas fa-calendar-check"></i>
                    Đặt lịch ngay
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Function to show toast notification
        function showToast(message, isSuccess) {
            let toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toastContainer';
                toastContainer.style.position = 'fixed';
                toastContainer.style.top = '20px';
                toastContainer.style.right = '20px';
                toastContainer.style.zIndex = '1000';
                document.body.appendChild(toastContainer);
            }

            const toast = document.createElement('div');
            toast.className = `toast ${isSuccess ? 'toast-success' : 'toast-error'}`;
            toast.textContent = message;
            toast.style.padding = '12px 20px';
            toast.style.marginBottom = '10px';
            toast.style.borderRadius = '4px';
            toast.style.color = '#fff';
            toast.style.backgroundColor = isSuccess ? '#28a745' : '#dc3545';
            toast.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
            toast.style.opacity = '0';
            toast.style.transition = 'opacity 0.3s ease-in-out';

            toastContainer.appendChild(toast);

            setTimeout(() => {
                toast.style.opacity = '1';
            }, 100);

            setTimeout(() => {
                toast.style.opacity = '0';
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }

        // Replace showModal with showToast
        function showModal(message, isSuccess) {
            showToast(message, isSuccess);
        }

        // Existing JavaScript code
        document.getElementById("DealerId").addEventListener("change", async function () {
            const dealerId = this.value;
            const date = document.getElementById("AppointmentDate").value;

            // Chỉ cập nhật time slots khi chọn đại lý, không load lại danh sách xe
            // Vì tất cả xe đều có thể được lái thử ở bất kỳ đại lý nào
            if (date) {
                await updateTimeSlots(dealerId, date);
            }
        });

        document.getElementById("VehicleId").addEventListener("change", function () {
            const selectedOption = this.options[this.selectedIndex];
            const imageUrl = selectedOption.getAttribute("data-image");
            const vehicleName = selectedOption.getAttribute("data-name");
            const vehicleModel = selectedOption.getAttribute("data-model");
            const vehicleImage = document.getElementById("vehicleImage");
            const placeholder = document.querySelector('.no-image-placeholder');

            console.log("=== VEHICLE SELECTION DEBUG ===");
            console.log("Selected vehicle:", vehicleName, vehicleModel);
            console.log("Raw image URL from data-image:", imageUrl);
            console.log("Image URL type:", typeof imageUrl);
            console.log("Image URL length:", imageUrl ? imageUrl.length : 0);
            console.log("Title attribute:", selectedOption.title);

            if (imageUrl && imageUrl !== "null" && imageUrl !== "" && imageUrl.trim() !== "") {
                // Xử lý đường dẫn hình ảnh
                let finalImageUrl = imageUrl.trim();
                
                // Nếu đường dẫn không bắt đầu bằng http hoặc /, thêm / vào đầu
                if (!finalImageUrl.startsWith('http') && !finalImageUrl.startsWith('/')) {
                    finalImageUrl = '/' + finalImageUrl;
                }
                
                console.log("Final image URL:", finalImageUrl);
                
                // Ẩn placeholder và hiển thị hình ảnh
                if (placeholder) {
                    placeholder.style.display = "none";
                }
                vehicleImage.style.display = "block";
                vehicleImage.src = finalImageUrl;
                
                // Xử lý khi hình ảnh load thành công
                vehicleImage.onload = function() {
                    console.log("✅ Image loaded successfully:", finalImageUrl);
                    console.log("Image dimensions:", this.naturalWidth, "x", this.naturalHeight);
                };
                
                // Xử lý khi hình ảnh load thất bại
                vehicleImage.onerror = function() {
                    console.error("❌ Failed to load image:", finalImageUrl);
                    this.style.display = "none";
                    if (placeholder) {
                        placeholder.style.display = "flex";
                    }
                    
                    // Thử load với đường dẫn khác nếu có thể
                    if (!finalImageUrl.startsWith('/images/') && !finalImageUrl.includes('://')) {
                        const alternativeUrl = '/images/vehicles/' + imageUrl.replace(/^\/+/, '');
                        console.log("Trying alternative URL:", alternativeUrl);
                        this.src = alternativeUrl;
                    }
                };
            } else {
                console.log("❌ No valid image URL available");
                vehicleImage.src = "";
                vehicleImage.style.display = "none";
                if (placeholder) {
                    placeholder.style.display = "flex";
                }
            }
            console.log("=== END DEBUG ===");
        });

        document.getElementById("AppointmentDate").addEventListener("change", async function () {
            const dealerId = document.getElementById("DealerId").value;
            const date = this.value;
            if (dealerId && date) {
                await updateTimeSlots(dealerId, date);
            }
        });

        async function updateTimeSlots(dealerId, date) {
            try {
                const timeSlotResponse = await fetch(`/BookTestDrive?handler=TimeSlots&dealerId=${dealerId}&date=${date}`);
                if (!timeSlotResponse.ok) {
                    throw new Error('Lỗi tải danh sách khung giờ');
                }
                const timeSlots = await timeSlotResponse.json();
                const timeSlotSelect = document.getElementById("TimeSlot");
                timeSlotSelect.innerHTML = '<option value="">-- Chọn giờ --</option>';
                timeSlots.forEach(slot => {
                    try {
                        const time = new Date(slot.appointmentDate).toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
                        timeSlotSelect.innerHTML += `<option value="${time}">${time}</option>`;
                    } catch (e) {
                        console.error('Error parsing time slot:', e);
                    }
                });
            } catch (error) {
                console.error('Error:', error);
                showModal('Lỗi khi tải khung giờ. Vui lòng thử lại.', false);
            }
        }

        document.getElementById('bookingForm').addEventListener('submit', async function (event) {
            event.preventDefault();
            const form = this;
            const formData = new FormData(form);

            const dateInput = document.getElementById('AppointmentDate').value;
            const selectedDate = new Date(dateInput);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            if (selectedDate < today) {
                showModal('Ngày hẹn không thể là ngày trong quá khứ.', false);
                return;
            }

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Lỗi mạng hoặc server');
                }

                const result = await response.json();
                if (result.success) {
                    window.location.href = '/MyAppointment';
                    return;
                }
                showModal(result.message, false);
            } catch (error) {
                console.error('Error:', error);
                showModal('Đã xảy ra lỗi khi đặt lịch. Vui lòng thử lại.', false);
            }
        });
    </script>
}