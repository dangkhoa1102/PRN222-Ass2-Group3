@page
@model Assignment02.Pages.BookTestDriveModel
@{
    ViewData["Title"] = "Book Test Drive";
}

<style>
    body {
        background-color: #f4f6f9;
    }

    .create-container {
        max-width: 800px;
        margin: 40px auto;
        background: #fff;
        border-radius: 12px;
        padding: 30px 40px;
        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
    }

    .create-header {
        text-align: center;
        color: #007bff;
        font-weight: 700;
        margin-bottom: 30px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        font-weight: 600;
        color: #333;
        margin-bottom: 8px;
        display: block;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }

    .form-select {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e9ecef;
        border-radius: 8px;
        font-size: 1rem;
        background-color: #fff;
        transition: border-color 0.3s ease;
    }

    .form-select:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
    }

    .btn-create {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 12px 24px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
        font-size: 1rem;
    }

    .btn-create:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #20c997, #28a745);
    }

    .btn-cancel {
        background: linear-gradient(45deg, #6c757d, #5a6268);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 12px 24px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
        font-size: 1rem;
        text-decoration: none;
        display: inline-block;
        margin-right: 10px;
    }

    .btn-cancel:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #5a6268, #6c757d);
        color: white;
    }

    .dealer-info {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-top: 10px;
        border-left: 4px solid #ffc107;
    }

    .vehicle-info {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-top: 10px;
        border-left: 4px solid #28a745;
    }

    .time-info {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-top: 10px;
        border-left: 4px solid #17a2b8;
    }

    .info-title {
        font-weight: 600;
        color: #007bff;
        margin-bottom: 10px;
    }

    .text-danger {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .alert {
        border-radius: 8px;
        border: none;
        margin-bottom: 20px;
    }

    .alert-success {
        background: linear-gradient(135deg, #d4edda, #c3e6cb);
        color: #198754;
    }

    .alert-danger {
        background: linear-gradient(135deg, #f8d7da, #f5c6cb);
        color: #842029;
    }

    .vehicle-image {
        max-width: 100%;
        max-height: 200px;
        border-radius: 8px;
        border: 1px solid #dee2e6;
        margin-top: 10px;
    }

    .no-image {
        text-align: center;
        color: #6c757d;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
        margin-top: 10px;
    }
</style>

<!-- SignalR Scripts -->
<script src="~/lib/microsoft-signalr/dist/browser/signalr.min.js"></script>
<script>
    // Get current user ID from session or hidden field
    const currentUserId = '@Model.CurrentUserId';
    
    if (currentUserId) {
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/realtimehub")
            .build();

        connection.start().then(function () {
            console.log("SignalR Connected for Book Test Drive");
            console.log("Current User ID:", currentUserId);
            // Join customer group
            connection.invoke("JoinGroup", `customer_${currentUserId}`).then(function() {
                console.log("Joined customer group:", `customer_${currentUserId}`);
            }).catch(function(err) {
                console.error("Failed to join customer group:", err);
            });
        }).catch(function (err) {
            console.error("SignalR Connection Error: ", err.toString());
        });

        // Listen for test drive booking confirmations
        connection.on("TestDriveBooked", function (data) {
            console.log(`Test drive booked: ${data.customerName} - ${data.vehicleName} - ${data.appointmentDate}`);
            showNotification(`Test drive appointment booked successfully: ${data.vehicleName}`);
        });

        // Listen for test drive status updates
        connection.on("TestDriveUpdated", function (data) {
            console.log(`Test drive updated: ${data.customerName} - ${data.vehicleName} - ${data.status}`);
            showNotification(`Test drive appointment updated: ${data.status}`);
        });

        // Listen for test drive cancellations
        connection.on("TestDriveCancelled", function (data) {
            console.log(`Test drive cancelled: ${data.customerName} - ${data.vehicleName}`);
            showNotification(`Test drive appointment cancelled: ${data.vehicleName}`);
        });

        // Show notification function
        function showNotification(message) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = 'alert alert-info alert-dismissible fade show position-fixed';
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-info-circle me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            document.body.appendChild(notification);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }
    }
</script>

<!-- Success/Error Messages -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success text-center" style="margin: 1rem 2rem;">
        <i class="fas fa-check-circle me-2"></i>
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger text-center" style="margin: 1rem 2rem;">
        <i class="fas fa-exclamation-triangle me-2"></i>
        @TempData["ErrorMessage"]
    </div>
}

<div class="create-container">
        <h2 class="create-header">🚗 Book Test Drive Appointment</h2>
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <form method="post" id="bookingForm">
        <div class="form-group">
            <label class="form-label" for="Appointment_DealerId">Select Dealer *</label>
            <select asp-for="Appointment.DealerId" class="form-select" id="DealerId" required>
                <option value="">-- Select Dealer --</option>
                @foreach (var dealer in Model.Dealers)
                {
                    <option value="@dealer.Id">@dealer.Name - @dealer.Address</option>
                }
            </select>
            <span asp-validation-for="Appointment.DealerId" class="text-danger"></span>
            
            <!-- Dealer Info Display -->
            <div id="dealerInfo" class="dealer-info" style="display: none;">
                <div class="info-title">🏢 Dealer Information</div>
                <div id="dealerDetails"></div>
            </div>
        </div>

        <div class="form-group">
            <label class="form-label" for="Appointment_VehicleId">Select Vehicle *</label>
            <select asp-for="Appointment.VehicleId" class="form-select" id="VehicleId" required>
                <option value="">-- Select Vehicle --</option>
                @foreach (var vehicle in Model.Vehicles)
                {
                    <option value="@vehicle.Id" 
                            data-image="@(!string.IsNullOrEmpty(vehicle.Images) ? vehicle.Images : "")" 
                            data-name="@vehicle.Name" 
                            data-model="@vehicle.Model">
                        @vehicle.Name @vehicle.Model
                    </option>
                }
            </select>
            <span asp-validation-for="Appointment.VehicleId" class="text-danger"></span>
            
            <!-- Vehicle Info Display -->
            <div id="vehicleInfo" class="vehicle-info" style="display: none;">
                <div class="info-title">🚗 Vehicle Information</div>
                <div id="vehicleDetails"></div>
                <div id="vehicleImageContainer">
                    <img id="vehicleImage" src="" alt="Vehicle Image" class="vehicle-image" style="display: none;" />
                    <div id="noImage" class="no-image" style="display: none;">
                        <i class="fas fa-car" style="font-size: 2rem; margin-bottom: 10px;"></i>
                        <p>No image available</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label class="form-label" for="Appointment_AppointmentDate">Select Date *</label>
            <input asp-for="Appointment.AppointmentDate" type="date" class="form-control" id="AppointmentDate" required min="@DateTime.Now.ToString("yyyy-MM-dd")" />
            <span asp-validation-for="Appointment.AppointmentDate" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label class="form-label" for="SelectedTimeSlot">Select Time *</label>
            <select asp-for="SelectedTimeSlot" class="form-select" id="TimeSlot" required>
                <option value="">-- Select Time --</option>
                @foreach (var slot in Model.AvailableTimeSlots)
                {
                    <option value="@slot.AppointmentDate.ToString("HH:mm")">@slot.AppointmentDate.ToString("hh:mm tt")</option>
                }
            </select>
            <span asp-validation-for="SelectedTimeSlot" class="text-danger"></span>
            
            <!-- Current Time Info -->
            <div id="currentTimeInfo" class="time-info" style="display: none;">
                <div class="info-title">🕐 Current Time</div>
                <div id="currentTimeDetails"></div>
            </div>
            
            <!-- Time Info Display -->
            <div id="timeInfo" class="time-info" style="display: none;">
                <div class="info-title">⏰ Time Information</div>
                <div id="timeDetails"></div>
            </div>
        </div>

        <div class="form-group">
            <label class="form-label" for="Appointment_Notes">Notes</label>
            <textarea asp-for="Appointment.Notes" class="form-control" rows="4" 
                      placeholder="Enter notes for the test drive appointment..."></textarea>
            <span asp-validation-for="Appointment.Notes" class="text-danger"></span>
        </div>

        <div class="text-center mt-4">
            <a href="/MyAppointment" class="btn-cancel">
                <i class="fas fa-arrow-left"></i> Cancel
            </a>
            <button type="submit" class="btn-create">
                <i class="fas fa-calendar-check"></i> Book Appointment
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // Auto-select vehicle if vehicleId is provided in URL
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const vehicleId = urlParams.get('vehicleId');
            
            if (vehicleId) {
                const vehicleSelect = document.getElementById('VehicleId');
                if (vehicleSelect) {
                    vehicleSelect.value = vehicleId;
                    // Trigger change event to show vehicle info
                    vehicleSelect.dispatchEvent(new Event('change'));
                }
            }
        });

        // Dealer selection handler
        document.getElementById('DealerId').addEventListener('change', async function() {
            const dealerInfo = document.getElementById('dealerInfo');
            const dealerDetails = document.getElementById('dealerDetails');
            
            if (this.value) {
                const selectedText = this.options[this.selectedIndex].text;
                dealerDetails.innerHTML = `
                    <div><strong>Selected:</strong> ${selectedText}</div>
                `;
                dealerInfo.style.display = 'block';
                
                // Load time slots if date is also selected
                const date = document.getElementById("AppointmentDate").value;
                if (date) {
                    await updateTimeSlots(this.value, date);
                }
            } else {
                dealerInfo.style.display = 'none';
                // Clear time slots when dealer is deselected
                const timeSlotSelect = document.getElementById("TimeSlot");
                timeSlotSelect.innerHTML = '<option value="">-- Select Time --</option>';
            }
        });

        // Vehicle selection handler
        document.getElementById('VehicleId').addEventListener('change', function() {
            const vehicleInfo = document.getElementById('vehicleInfo');
            const vehicleDetails = document.getElementById('vehicleDetails');
            const vehicleImage = document.getElementById('vehicleImage');
            const noImage = document.getElementById('noImage');
            
            if (this.value) {
                const selectedOption = this.options[this.selectedIndex];
                const selectedText = selectedOption.text;
                const imageUrl = selectedOption.getAttribute('data-image');
                
                vehicleDetails.innerHTML = `
                    <div><strong>Selected:</strong> ${selectedText}</div>
                `;
                vehicleInfo.style.display = 'block';
                
                // Handle vehicle image
                if (imageUrl && imageUrl !== "null" && imageUrl !== "" && imageUrl.trim() !== "") {
                    let finalImageUrl = imageUrl.trim();
                    if (!finalImageUrl.startsWith('http') && !finalImageUrl.startsWith('/')) {
                        finalImageUrl = '/' + finalImageUrl;
                    }
                    
                    vehicleImage.src = finalImageUrl;
                    vehicleImage.style.display = 'block';
                    noImage.style.display = 'none';
                    
                    vehicleImage.onerror = function() {
                        this.style.display = 'none';
                        noImage.style.display = 'block';
                    };
                } else {
                    vehicleImage.style.display = 'none';
                    noImage.style.display = 'block';
                }
            } else {
                vehicleInfo.style.display = 'none';
            }
        });

        // Time slot selection handler
        document.getElementById('TimeSlot').addEventListener('change', function() {
            const timeInfo = document.getElementById('timeInfo');
            const timeDetails = document.getElementById('timeDetails');
            
            if (this.value) {
                const selectedText = this.options[this.selectedIndex].text;
                timeDetails.innerHTML = `
                    <div><strong>Selected Time:</strong> ${selectedText}</div>
                `;
                timeInfo.style.display = 'block';
            } else {
                timeInfo.style.display = 'none';
            }
        });

        // Date change handler for time slots
        document.getElementById("AppointmentDate").addEventListener("change", async function () {
            const dealerId = document.getElementById("DealerId").value;
            const date = this.value;
            
            // Show current time info for today
            const selectedDate = new Date(date);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            const isToday = selectedDate.getTime() === today.getTime();
            
            if (isToday) {
                showCurrentTimeInfo();
            } else {
                hideCurrentTimeInfo();
            }
            
            if (dealerId && date) {
                await updateTimeSlots(dealerId, date);
            } else {
                // Clear time slots if dealer or date is missing
                const timeSlotSelect = document.getElementById("TimeSlot");
                timeSlotSelect.innerHTML = '<option value="">-- Select Time --</option>';
            }
        });
        
        // Show current time info
        function showCurrentTimeInfo() {
            const currentTimeInfo = document.getElementById('currentTimeInfo');
            const currentTimeDetails = document.getElementById('currentTimeDetails');
            
            if (currentTimeInfo && currentTimeDetails) {
                const now = new Date();
                const timeString = now.toLocaleTimeString('vi-VN', { 
                    hour: '2-digit', 
                    minute: '2-digit',
                    second: '2-digit'
                });
                
                currentTimeDetails.innerHTML = `
                    <div><strong>Thời gian hiện tại:</strong> ${timeString}</div>
                    <div><small>Chỉ có thể chọn thời gian sau thời điểm này</small></div>
                `;
                currentTimeInfo.style.display = 'block';
            }
        }
        
        // Hide current time info
        function hideCurrentTimeInfo() {
            const currentTimeInfo = document.getElementById('currentTimeInfo');
            if (currentTimeInfo) {
                currentTimeInfo.style.display = 'none';
            }
        }

        async function updateTimeSlots(dealerId, date) {
            try {
                console.log(`Loading time slots for dealer: ${dealerId}, date: ${date}`);
                const timeSlotResponse = await fetch(`/BookTestDrive?handler=TimeSlots&dealerId=${dealerId}&date=${date}`);
                if (!timeSlotResponse.ok) {
                    throw new Error('Lỗi tải danh sách khung giờ');
                }
                const timeSlots = await timeSlotResponse.json();
                console.log('Time slots received:', timeSlots);
                
                const timeSlotSelect = document.getElementById("TimeSlot");
                timeSlotSelect.innerHTML = '<option value="">-- Select Time --</option>';
                
                if (timeSlots && timeSlots.length > 0) {
                    const now = new Date();
                    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    const selectedDate = new Date(date);
                    const isToday = selectedDate.getTime() === today.getTime();
                    
                    timeSlots.forEach(slot => {
                        try {
                            let appointmentDate;
                            if (typeof slot.appointmentDate === 'string') {
                                appointmentDate = new Date(slot.appointmentDate);
                            } else if (slot.appointmentDate) {
                                appointmentDate = new Date(slot.appointmentDate);
                            } else {
                                console.error('Invalid appointment date:', slot);
                                return;
                            }
                            
                            const time = appointmentDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit' });
                            const timeValue = appointmentDate.toTimeString().substring(0, 5);
                            
                            // Check if this time slot is in the past (for today only)
                            let isPastTime = false;
                            if (isToday) {
                                const slotTime = appointmentDate.getTime();
                                const currentTime = now.getTime();
                                isPastTime = slotTime <= currentTime;
                            }
                            
                            if (isPastTime) {
                                timeSlotSelect.innerHTML += `<option value="${timeValue}" disabled style="color: #999;">${time} (Đã qua)</option>`;
                            } else {
                                timeSlotSelect.innerHTML += `<option value="${timeValue}">${time}</option>`;
                            }
                        } catch (e) {
                            console.error('Error parsing time slot:', e, slot);
                        }
                    });
                } else {
                    console.log('No time slots available');
                    timeSlotSelect.innerHTML += '<option value="" disabled>No available time slots</option>';
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error loading time slots. Please try again.');
            }
        }

        // Form submission handler
        document.getElementById('bookingForm').addEventListener('submit', async function (event) {
            event.preventDefault();
            const form = this;
            const formData = new FormData(form);

            const dateInput = document.getElementById('AppointmentDate').value;
            const timeInput = document.getElementById('TimeSlot').value;
            const selectedDate = new Date(dateInput);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (selectedDate < today) {
                alert('Ngày hẹn không thể là ngày trong quá khứ.');
                return;
            }
            
            // Check if selected time is in the past (for today)
            if (selectedDate.getTime() === today.getTime() && timeInput) {
                const [hours, minutes] = timeInput.split(':').map(Number);
                const selectedDateTime = new Date(selectedDate);
                selectedDateTime.setHours(hours, minutes, 0, 0);
                
                if (selectedDateTime <= new Date()) {
                    alert('Không thể đặt lịch hẹn trong quá khứ. Vui lòng chọn thời gian trong tương lai.');
                    return;
                }
            }

            const submitBtn = document.querySelector('.btn-create');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Đang xử lý...';

            try {
                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error('Lỗi mạng hoặc server');
                }

                const result = await response.json();
                if (result.success) {
                    alert('Đặt lịch hẹn thành công!');
                    window.location.href = '/MyAppointment';
                    return;
                }
                alert(result.message);
            } catch (error) {
                console.error('Error:', error);
                alert('Đã xảy ra lỗi khi đặt lịch. Vui lòng thử lại.');
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        });
    </script>
}