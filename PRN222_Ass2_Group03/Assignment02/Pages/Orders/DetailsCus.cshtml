@page "/Orders/DetailsCus/{id}"
@model Assignment02.Pages.Orders.DetailsCusModel
@{
    ViewData["Title"] = "Order Details";
}

<style>
    body {
        background-color: #f4f6f9;
    }

    .details-container {
        max-width: 800px;
        margin: 40px auto;
        background: #fff;
        border-radius: 12px;
        padding: 30px 40px;
        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.1);
    }

    .details-header {
        text-align: center;
        color: #007bff;
        font-weight: 700;
        margin-bottom: 25px;
    }

    .detail-item {
        margin-bottom: 15px;
        font-size: 1.05rem;
    }

    .badge {
        padding: 7px 14px;
        border-radius: 20px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .badge-success {
        background-color: #d4edda;
        color: #198754;
    }

    .badge-warning {
        background-color: #fff3cd;
        color: #856404;
    }

    .badge-danger {
        background-color: #f8d7da;
        color: #842029;
    }

    .btn-back {
        background: linear-gradient(45deg, #007bff, #0056b3);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
    }

    .btn-back:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #0056b3, #007bff);
    }

    .btn-payment {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
        text-decoration: none;
        display: inline-block;
    }

    .btn-payment:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #20c997, #28a745);
        color: white;
    }

    .btn-confirm {
        background: linear-gradient(45deg, #17a2b8, #138496);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
    }

    .btn-confirm:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #138496, #17a2b8);
        color: white;
    }

    .btn-process {
        background: linear-gradient(45deg, #ffc107, #e0a800);
        color: #212529;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
    }

    .btn-process:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #e0a800, #ffc107);
        color: #212529;
    }

    .btn-ship {
        background: linear-gradient(45deg, #6f42c1, #5a32a3);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
    }

    .btn-ship:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #5a32a3, #6f42c1);
        color: white;
    }

    .btn-deliver {
        background: linear-gradient(45deg, #28a745, #1e7e34);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
    }

    .btn-deliver:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #1e7e34, #28a745);
        color: white;
    }

    .btn-complete {
        background: linear-gradient(45deg, #28a745, #20c997);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
    }

    .btn-complete:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #20c997, #28a745);
        color: white;
    }

    .btn-done {
        background: linear-gradient(45deg, #17a2b8, #138496);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
    }

    .btn-done:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #138496, #17a2b8);
        color: white;
    }

    .btn-cancel {
        background: linear-gradient(45deg, #dc3545, #c82333);
        color: #fff;
        border: none;
        font-weight: 600;
        padding: 8px 16px;
        border-radius: 8px;
        transition: 0.2s;
        cursor: pointer;
    }

    .btn-cancel:hover {
        transform: scale(1.05);
        background: linear-gradient(45deg, #c82333, #dc3545);
        color: white;
    }

    .info-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        border-left: 4px solid #007bff;
    }

    .section-title {
        color: #007bff;
        font-weight: 600;
        margin-bottom: 15px;
        font-size: 1.1rem;
    }

    .appointment-item {
        background: #fff;
        border-radius: 6px;
        padding: 15px;
        margin-bottom: 10px;
        border: 1px solid #e9ecef;
    }

    .vehicle-images {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        margin-top: 10px;
    }

    .vehicle-image {
        max-width: 150px;
        max-height: 100px;
        object-fit: cover;
        border-radius: 6px;
        border: 1px solid #dee2e6;
    }
</style>

@if (Model.Order == null)
{
    <div class="alert alert-danger text-center mt-5">Order not found.</div>
}
else
{
    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success text-center mt-3" style="margin: 1rem 2rem; border-radius: 12px; border: none; background: linear-gradient(135deg, #d4edda, #c3e6cb); color: #198754;">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger text-center mt-3" style="margin: 1rem 2rem; border-radius: 12px; border: none; background: linear-gradient(135deg, #f8d7da, #f5c6cb); color: #842029;">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="details-container">
        <h2 class="details-header">Order Details</h2>

        <!-- Order Information Section -->
        <div class="info-section">
            <h4 class="section-title">📋 Order Information</h4>
            <div class="detail-item"><strong>Order #:</strong> @Model.Order.OrderNumber</div>
            <div class="detail-item"><strong>Total Amount:</strong> @Model.Order.TotalAmount.ToString("N0") ₫</div>
            <div class="detail-item"><strong>Created At:</strong> @Model.Order.CreatedAt?.ToString("dd/MM/yyyy HH:mm")</div>
            <div class="detail-item"><strong>Updated At:</strong> @Model.Order.UpdatedAt?.ToString("dd/MM/yyyy HH:mm")</div>
            <div class="detail-item"><strong>Notes:</strong> @(Model.Order.Notes ?? "—")</div>
            
            <div class="detail-item">
                <strong>Status:</strong>
                @if (Model.Order.Status?.Equals("completed", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <span class="badge badge-success">Completed</span>
                }
                else if (Model.Order.Status?.Equals("complete", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <span class="badge badge-primary">Complete</span>
                }
                else if (Model.Order.Status?.Equals("done", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <span class="badge badge-dark">DONE</span>
                }
                else if (Model.Order.Status?.Equals("processing", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <span class="badge badge-warning">Processing</span>
                }
                else if (Model.Order.Status?.Equals("cancelled", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <span class="badge badge-danger">Cancelled</span>
                }
                else
                {
                    <span class="badge badge-info">@Model.Order.Status</span>
                }
            </div>

            <div class="detail-item">
                <strong>Payment Status:</strong>
                @if (Model.Order.PaymentStatus == "Paid")
                {
                    <span class="badge badge-success">Paid</span>
                }
                else
                {
                    <span class="badge badge-danger">Unpaid</span>
                }
            </div>
        </div>

        <!-- Customer Information Section -->
        <div class="info-section">
            <h4 class="section-title">👤 Customer Information</h4>
            <div class="detail-item"><strong>Customer Name:</strong> @Model.Order.CustomerName</div>
            <div class="detail-item"><strong>Customer Phone:</strong> @Model.Order.CustomerPhone</div>
        </div>

        <!-- Vehicle Information Section -->
        <div class="info-section">
            <h4 class="section-title">🚗 Vehicle Information</h4>
            <div class="detail-item"><strong>Vehicle Name:</strong> @Model.Order.VehicleName</div>
            <div class="detail-item"><strong>Brand:</strong> @Model.Order.VehicleBrand</div>
            <div class="detail-item"><strong>Model:</strong> @Model.Order.VehicleModel</div>
            @if (!string.IsNullOrEmpty(Model.Order.VehicleImage))
            {
                <div class="detail-item">
                    <strong>Image:</strong>
                    <div class="vehicle-images">
                        <img src="@Model.Order.VehicleImage" alt="Vehicle Image" class="vehicle-image" />
                    </div>
                </div>
            }
        </div>

        <!-- Dealer Information Section -->
        <div class="info-section">
            <h4 class="section-title">🏢 Dealer Information</h4>
            <div class="detail-item"><strong>Dealer Name:</strong> @Model.Order.DealerName</div>
            <div class="detail-item"><strong>Dealer ID:</strong> @Model.Order.DealerId</div>
        </div>

        <!-- Test Drive Appointments Section removed as OrderDTO does not contain nested objects -->

        <div class="text-center mt-4">
            @{
                var isCustomer = Model.CurrentUserRole?.Equals("Customer", StringComparison.OrdinalIgnoreCase) == true || 
                                Model.CurrentUserRole?.Equals("CUSTOMER", StringComparison.OrdinalIgnoreCase) == true;
                var isStaffOrAdmin = Model.CurrentUserRole?.Equals("Admin", StringComparison.OrdinalIgnoreCase) == true || 
                                    Model.CurrentUserRole?.Equals("Staff", StringComparison.OrdinalIgnoreCase) == true ||
                                    Model.CurrentUserRole?.Equals("ADMIN", StringComparison.OrdinalIgnoreCase) == true ||
                                    Model.CurrentUserRole?.Equals("STAFF", StringComparison.OrdinalIgnoreCase) == true;
                var isUnpaid = Model.Order.PaymentStatus?.Equals("Unpaid", StringComparison.OrdinalIgnoreCase) == true;
                var isProcessing = Model.Order.Status?.Equals("Processing", StringComparison.OrdinalIgnoreCase) == true;
            }
            
            @* Customer payment button *@
            @if (isCustomer && isUnpaid && isProcessing)
            {
                <a href="/Orders/Payment/@Model.Order.Id" class="btn btn-payment">
                    <i class="fas fa-credit-card"></i> Thanh toán
                </a>
                <span style="margin: 0 10px;"></span>
            }
            
            @* Customer complete order button *@
            @if (isCustomer && Model.Order.Status?.Equals("Delivered", StringComparison.OrdinalIgnoreCase) == true)
            {
                <button class="btn btn-complete" onclick="completeOrder('@Model.Order.Id')">
                    <i class="fas fa-check-circle"></i> Hoàn thành đơn hàng
                </button>
                <span style="margin: 0 10px;"></span>
            }
            
            @* Customer DONE button *@
            @if (isCustomer && Model.Order.Status?.Equals("Complete", StringComparison.OrdinalIgnoreCase) == true)
            {
                <button class="btn btn-done" onclick="updateOrderStatus('@Model.Order.Id', 'DONE')">
                    <i class="fas fa-flag-checkered"></i> DONE
                </button>
                <span style="margin: 0 10px;"></span>
            }
            
            @* Customer cancel order button (only before payment) *@
            @if (isCustomer && isUnpaid && Model.Order.Status?.Equals("Processing", StringComparison.OrdinalIgnoreCase) == true)
            {
                <button class="btn btn-cancel" onclick="cancelOrder('@Model.Order.Id')">
                    <i class="fas fa-times-circle"></i> Hủy đơn hàng
                </button>
                <span style="margin: 0 10px;"></span>
            }
            
            @* Staff/Admin management buttons *@
            @if (isStaffOrAdmin)
            {
                @if (Model.Order.Status?.Equals("Pending", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <button class="btn btn-confirm" onclick="updateOrderStatus('@Model.Order.Id', 'Confirmed')">
                        <i class="fas fa-check"></i> Confirm Order
                    </button>
                    <span style="margin: 0 10px;"></span>
                }
                @if (Model.Order.Status?.Equals("Confirmed", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <button class="btn btn-process" onclick="updateOrderStatus('@Model.Order.Id', 'Processing')">
                        <i class="fas fa-cog"></i> Start Processing
                    </button>
                    <span style="margin: 0 10px;"></span>
                }
                @if (Model.Order.Status?.Equals("Processing", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <button class="btn btn-ship" onclick="updateOrderStatus('@Model.Order.Id', 'Shipped')">
                        <i class="fas fa-shipping-fast"></i> Ship Order
                    </button>
                    <span style="margin: 0 10px;"></span>
                }
                @if (Model.Order.Status?.Equals("Shipped", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <button class="btn btn-deliver" onclick="updateOrderStatus('@Model.Order.Id', 'Completed')">
                        <i class="fas fa-check-circle"></i> Complete Order
                    </button>
                    <span style="margin: 0 10px;"></span>
                }
                
                @* Staff can cancel any order except paid orders *@
                @if (Model.Order.Status != "Cancelled" && Model.Order.Status != "Completed" && 
                     !Model.Order.PaymentStatus?.Equals("Paid", StringComparison.OrdinalIgnoreCase) == true)
                {
                    <button class="btn btn-cancel" onclick="cancelOrder('@Model.Order.Id')">
                        <i class="fas fa-times-circle"></i> Cancel Order
                    </button>
                    <span style="margin: 0 10px;"></span>
                }
            }
            
            <a href="javascript:history.back()" class="btn btn-back">← Back to previous page</a>
        </div>
    </div>
}

<script>
function updateOrderStatus(orderId, newStatus) {
    if (confirm(`Bạn có chắc chắn muốn cập nhật trạng thái đơn hàng thành "${newStatus}"?`)) {
        // Create a form to submit the update
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = '/Orders/DetailsCus/' + orderId;
        
        // Add order ID and new status as form data
        const orderIdInput = document.createElement('input');
        orderIdInput.type = 'hidden';
        orderIdInput.name = 'orderId';
        orderIdInput.value = orderId;
        form.appendChild(orderIdInput);
        
        const statusInput = document.createElement('input');
        statusInput.type = 'hidden';
        statusInput.name = 'newStatus';
        statusInput.value = newStatus;
        form.appendChild(statusInput);
        
        // Add anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            form.appendChild(token.cloneNode());
        }
        
        document.body.appendChild(form);
        form.submit();
    }
}

function completeOrder(orderId) {
    if (confirm('Bạn có chắc chắn muốn hoàn thành đơn hàng này?')) {
        // Create a form to submit the update
        const form = document.createElement('form');
        form.method = 'POST';
            form.action = '/Orders/DetailsCus/' + orderId;
        
        // Add order ID and new status as form data
        const orderIdInput = document.createElement('input');
        orderIdInput.type = 'hidden';
        orderIdInput.name = 'orderId';
        orderIdInput.value = orderId;
        form.appendChild(orderIdInput);
        
        const statusInput = document.createElement('input');
        statusInput.type = 'hidden';
        statusInput.name = 'newStatus';
        statusInput.value = 'Completed';
        form.appendChild(statusInput);
        
        // Add anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]');
        if (token) {
            form.appendChild(token.cloneNode());
        }
        
        document.body.appendChild(form);
        form.submit();
    }
}

function cancelOrder(orderId) {
    const reason = prompt('Vui lòng nhập lý do hủy đơn hàng:');
    if (reason && reason.trim() !== '') {
        if (confirm(`Bạn có chắc chắn muốn hủy đơn hàng với lý do: "${reason}"?`)) {
            // Create a form to submit the cancellation
            const form = document.createElement('form');
            form.method = 'POST';
                form.action = '/Orders/DetailsCus/' + orderId;
            
            // Add order ID and cancellation reason
            const orderIdInput = document.createElement('input');
            orderIdInput.type = 'hidden';
            orderIdInput.name = 'orderId';
            orderIdInput.value = orderId;
            form.appendChild(orderIdInput);
            
            const cancelInput = document.createElement('input');
            cancelInput.type = 'hidden';
            cancelInput.name = 'cancelReason';
            cancelInput.value = reason.trim();
            form.appendChild(cancelInput);
            
            // Add anti-forgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                form.appendChild(token.cloneNode());
            }
            
            document.body.appendChild(form);
            form.submit();
        }
    } else if (reason !== null) {
        alert('Vui lòng nhập lý do hủy đơn hàng!');
    }
}
</script>