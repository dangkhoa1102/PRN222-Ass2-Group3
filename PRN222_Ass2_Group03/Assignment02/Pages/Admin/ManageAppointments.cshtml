@page
@model Assignment02.Pages.Admin.ManageAppointmentsModel
@{
    ViewData["Title"] = "Manage Appointments";
}

@section Styles {
    <style>
        /* Page */
        .admin-wrap { max-width: 1280px; margin: 0 auto; padding: 24px 16px 48px; }
        .admin-hero { background: linear-gradient(135deg,#2196F3 0%,#4CAF50 100%); color:#fff; border-radius:16px; padding:28px 24px; text-align:center; box-shadow:0 12px 30px rgba(33,150,243,.25); margin-bottom:24px; }
        .admin-hero h1 { font-weight:800; margin:0; letter-spacing:.3px; }
        .admin-hero p { margin:8px 0 0 0; opacity:.95; }

        /* Grid */
        .cards { display:grid; grid-template-columns: repeat(auto-fill, minmax(360px, 1fr)); gap:18px; }

        /* Card */
        .card { background:#ffffff; border-radius:16px; overflow:hidden; box-shadow:0 10px 26px rgba(0,0,0,.12); border:1px solid #e9eef5; display:flex; flex-direction:column; }
        .card-head { background: linear-gradient(135deg,#3AA0F6,#5CC26F); color:#fff; padding:14px 16px; display:flex; align-items:center; justify-content:space-between; }
        .card-date { font-weight:700; opacity:.95; }
        .badge { background: rgba(255,255,255,.20); border:1px solid rgba(255,255,255,.35); padding:4px 10px; border-radius:999px; font-weight:700; font-size:.78rem; text-transform:uppercase; letter-spacing:.4px; }
        .badge.pending { background:rgba(255,193,7,.2); border-color:rgba(255,193,7,.45); }
        .badge.confirmed { background:rgba(76,175,80,.22); border-color:rgba(76,175,80,.45); }
        .badge.cancelled { background:rgba(244,67,54,.22); border-color:rgba(244,67,54,.45); }
        .badge.completed { background:rgba(33,150,243,.22); border-color:rgba(33,150,243,.45); }
        .badge.done { background:rgba(156,39,176,.22); border-color:rgba(156,39,176,.45); }

        .card-body { padding:16px; display:grid; grid-template-columns: 88px 1fr; gap:14px; align-items:flex-start; }
        .thumb { width:88px; height:88px; border-radius:12px; overflow:hidden; display:flex; align-items:center; justify-content:center; background:linear-gradient(135deg,#f5f7fa,#e8edf4); color:#6a7a90; }
        .thumb i { font-size:28px; }
        .v-title { margin:0 0 6px 0; font-weight:800; color:#1d2b3a; }
        .meta { margin:6px 0; color:#557189; display:flex; gap:14px; flex-wrap:wrap; }
        .meta i { color:#2196F3; }

        .infobox { margin-top:10px; background:#f7fafc; border-left:4px solid #2196F3; padding:10px 12px; border-radius:10px; color:#40566b; }
        .note { margin-top:10px; background:#f9fbff; border-left:4px solid #4CAF50; padding:10px 12px; border-radius:10px; color:#40566b; }

        .card-foot { padding:12px 16px; background:#f8fafc; border-top:1px solid #eef3f8; display:flex; gap:8px; flex-wrap:wrap; }
        .btn { border:none; border-radius:10px; padding:9px 12px; font-weight:700; letter-spacing:.2px; display:inline-flex; align-items:center; gap:8px; cursor:pointer; transition:.18s ease; }
        .btn i { font-size:.95rem; }
        .btn-approve { background:linear-gradient(135deg,#4CAF50,#66BB6A); color:#fff; }
        .btn-approve:hover { filter:brightness(.97); transform:translateY(-1px); }
        .btn-cancel { background:linear-gradient(135deg,#f44336,#e57373); color:#fff; }
        .btn-cancel:hover { filter:brightness(.97); transform:translateY(-1px); }
        .btn-complete { background:linear-gradient(135deg,#2196F3,#42A5F5); color:#fff; }
        .btn-complete:hover { filter:brightness(.97); transform:translateY(-1px); }
        .btn-detail { background:linear-gradient(135deg,#9C27B0,#BA68C8); color:#fff; text-decoration:none; }
        .btn-detail:hover { filter:brightness(.97); transform:translateY(-1px); color:#fff; }

        /* Responsive tweaks */
        @@media (max-width: 480px){ .card-body{ grid-template-columns:1fr; } .thumb{ width:100%; height:140px; } }
    </style>
}

<div class="admin-wrap">
    <div class="admin-hero">
        <h1>Manage Appointments</h1>
        <p>Bảng điều khiển quản trị các lịch hẹn lái thử</p>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">@TempData["SuccessMessage"]</div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
    }

    @if (Model.Appointments.Any())
    {
        <div class="cards">
            @foreach (var a in Model.Appointments)
            {
                var statusLower = a.Status?.ToLower();
                var badgeText = statusLower == "pending" ? "Processing" : a.Status;
                <div class="card">
                    <div class="card-head">
                        <span class="badge @(statusLower)">@badgeText</span>
                        <span class="card-date">@a.AppointmentDate.ToString("dd/MM/yyyy")</span>
                    </div>
                    <div class="card-body">
                        <div class="thumb">
                            @if (!string.IsNullOrEmpty(a.Vehicle?.Images))
                            {
                                <img src="@a.Vehicle.Images" alt="Vehicle" style="width:100%;height:100%;object-fit:cover;" />
                            }
                            else { <i class="fas fa-car"></i> }
                        </div>
                        <div>
                            <h3 class="v-title">@a.Vehicle?.Name</h3>
                            <div class="meta">
                                <span><i class="fas fa-map-marker-alt"></i> @a.Dealer?.Name</span>
                                <span><i class="fas fa-clock"></i> @a.AppointmentDate.ToString("HH:mm")</span>
                            </div>
                            <div class="infobox">
                                <strong><i class="fas fa-user"></i> Khách hàng:</strong>
                                <div>@a.Customer?.FullName</div>
                                <div>@a.Customer?.Email</div>
                                <div>@a.Customer?.Phone</div>
                            </div>
                            @if (!string.IsNullOrEmpty(a.Notes))
                            {
                                <div class="note"><strong>Ghi chú:</strong> @a.Notes</div>
                            }
                        </div>
                    </div>
                    <div class="card-foot">
                        <!-- View Detail Button - Always visible -->
                        <a href="/TestDrives/Details/@a.Id" class="btn btn-detail">
                            <i class="fas fa-eye"></i> View Detail
                        </a>
                        
                        @if (statusLower == "pending" || statusLower == "processing")
                        {
                            <button class="btn btn-approve" onclick="updateStatus('@a.Id','Confirmed')"><i class="fas fa-check"></i> Approve</button>
                            <button class="btn btn-cancel" onclick="cancelAppointment('@a.Id','@a.Vehicle?.Name')"><i class="fas fa-times"></i> Reject</button>
                        }
                        else if (statusLower == "confirmed")
                        {
                            <button class="btn btn-cancel" onclick="cancelAppointment('@a.Id','@a.Vehicle?.Name')"><i class="fas fa-ban"></i> Cancel</button>
                            <button class="btn btn-complete" onclick="updateStatus('@a.Id','Completed')"><i class="fas fa-flag-checkered"></i> Mark Completed</button>
                        }
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="admin-hero" style="padding:32px 24px;">
            Chưa có lịch hẹn nào.
        </div>
    }
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function cancelAppointment(appointmentId, vehicleName) {
            const reason = prompt('Please enter the reason for cancelling the appointment:');
            if (reason && reason.trim() !== '') {
                if (confirm(`Are you sure you want to cancel the appointment for ${vehicleName} with reason: "${reason}"?`)) {
                    // Create a form to submit the cancellation
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/Admin/ManageAppointments?handler=Cancel';
                    
                    // Add appointment ID and cancellation reason
                    const appointmentIdInput = document.createElement('input');
                    appointmentIdInput.type = 'hidden';
                    appointmentIdInput.name = 'id';
                    appointmentIdInput.value = appointmentId;
                    form.appendChild(appointmentIdInput);
                    
                    const cancelInput = document.createElement('input');
                    cancelInput.type = 'hidden';
                    cancelInput.name = 'CancelNote';
                    cancelInput.value = reason.trim();
                    form.appendChild(cancelInput);
                    
                    // Add anti-forgery token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (token) {
                        form.appendChild(token.cloneNode());
                    }
                    
                    document.body.appendChild(form);
                    form.submit();
                }
            } else if (reason !== null) {
                alert('Please enter a reason for cancelling the appointment!');
            }
        }
        
        function updateStatus(id, status){
            if(!confirm('Confirm to change status to ' + status + '?')) return;
            
            // Tạo form với CSRF token
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Admin/ManageAppointments';
            
            // Thêm các input ẩn
            const handlerInput = document.createElement('input');
            handlerInput.type = 'hidden';
            handlerInput.name = 'handler';
            handlerInput.value = 'UpdateStatus';
            form.appendChild(handlerInput);
            
            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = id;
            form.appendChild(idInput);
            
            const statusInput = document.createElement('input');
            statusInput.type = 'hidden';
            statusInput.name = 'status';
            statusInput.value = status;
            form.appendChild(statusInput);
            
            // Thêm CSRF token nếu có
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (tokenInput) {
                const csrfInput = document.createElement('input');
                csrfInput.type = 'hidden';
                csrfInput.name = '__RequestVerificationToken';
                csrfInput.value = tokenInput.value;
                form.appendChild(csrfInput);
            }
            
            document.body.appendChild(form);
            form.submit();
        }
    </script>
}
